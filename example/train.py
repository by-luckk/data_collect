import numpy as np
from scipy.spatial.transform import Rotation

def matrix_to_6dof(T):
    """
    将4x4齐次变换矩阵转换为6DoF位姿
    返回: [x, y, z, rx, ry, rz] (位置 + 旋转向量)
    """
    # 确保输入是numpy数组
    if not isinstance(T, np.ndarray):
        T = np.array(T)
    
    translation = T[:3, 3]
    rotation = Rotation.from_matrix(T[:3, :3])
    rotation_vector = rotation.as_rotvec()
    return np.concatenate([translation, rotation_vector])

def sixdof_to_matrix(sixdof):
    """
    将6DoF位姿转换为4x4齐次变换矩阵
    输入: [x, y, z, rx, ry, rz]
    """
    translation = sixdof[:3]
    rotation = Rotation.from_rotvec(sixdof[3:])
    T = np.eye(4)
    T[:3, :3] = rotation.as_matrix()
    T[:3, 3] = translation
    return T

def sixdof_to_rpy(sixdof):
    """6DoF位姿转RPY欧拉角"""
    rotation = Rotation.from_rotvec(sixdof[3:])
    return np.concatenate([sixdof[:3], rotation.as_euler('xyz')])

class SixDofPoseMapper:
    def __init__(self):
        self.W = np.eye(6)  # 初始化为单位矩阵
        self.b = np.zeros(6)  # 初始偏置为0
    
    def train(self, camera_poses, target_poses):
        """
        训练6DoF到6DoF的线性映射
        参数:
            camera_poses: 相机坐标系下的6DoF位姿列表
            target_poses: 基坐标系下的6DoF位姿列表
        """
        # 转换为NumPy数组
        X = np.array(camera_poses)  # N×6
        y = np.array(target_poses)  # N×6
        
        # 添加偏置项 (homogeneous coordinates)
        X_aug = np.hstack([X, np.ones((X.shape[0], 1))])
        
        # 最小二乘解: [W|b] = (XᵀX)⁻¹Xᵀy
        W_b = np.linalg.lstsq(X_aug, y, rcond=None)[0]
        
        # 分离权重和偏置
        self.W = W_b[:-1, :]  # 6×6权重矩阵
        self.b = W_b[-1, :]    # 6×1偏置向量
        
        return self.W, self.b
    
    def predict(self, camera_pose):
        """
        预测目标位姿
        参数:
            camera_pose: 相机坐标系下的6DoF位姿
        返回:
            基坐标系下的6DoF目标位姿
        """
        return camera_pose @ self.W + self.b
    
    def decompose_weights(self):
        """分解权重矩阵为物理意义明确的子矩阵"""
        return {
            'W_pos': self.W[:3, :3],     # 位置->位置映射
            'W_rot': self.W[3:, 3:],     # 旋转->旋转映射
            'W_pos_rot': self.W[:3, 3:], # 旋转->位置耦合
            'W_rot_pos': self.W[3:, :3]  # 位置->旋转耦合
        }
    
    def evaluate(self, camera_poses, target_poses):
        """评估模型精度"""
        pos_errors = []
        rot_errors = []
        
        for cam_pose, true_pose in zip(camera_poses, target_poses):
            pred_pose = self.predict(cam_pose)
            
            # 位置误差 (欧氏距离)
            pos_error = np.linalg.norm(true_pose[:3] - pred_pose[:3])
            pos_errors.append(pos_error)
            
            # 旋转误差 (角度差)
            R_true = Rotation.from_rotvec(true_pose[3:])
            R_pred = Rotation.from_rotvec(pred_pose[3:])
            angle_error = np.linalg.norm((R_true.inv() * R_pred).as_rotvec())
            rot_errors.append(angle_error)
        
        return {
            'mean_pos_error': np.mean(pos_errors),
            'std_pos_error': np.std(pos_errors),
            'max_pos_error': np.max(pos_errors),
            'mean_rot_error': np.degrees(np.mean(rot_errors)),
            'max_rot_error': np.degrees(np.max(rot_errors))
        }
    
# 生成模拟数据
def generate_synthetic_data(num_samples=100):
    camera_poses = []
    target_poses = []
    
    for _ in range(num_samples):
        # 随机生成相机坐标系下的位姿
        cam_pos = np.random.uniform(-0.1, 0.1, 3)  # ±10cm
        cam_rot = np.random.uniform(-0.5, 0.5, 3)  # ±0.5弧度
        
        # 真实映射关系 (示例)
        target_pos = cam_pos * 1.5 + np.array([0.2, -0.1, 0.3])
        target_rot = cam_rot * 0.8 + np.array([0.1, -0.05, 0.2])
        
        camera_poses.append(np.concatenate([cam_pos, cam_rot]))
        target_poses.append(np.concatenate([target_pos, target_rot]))
    
    return camera_poses, target_poses

# 训练和评估模型


target_poses = [
    [0.214245, 0.221110, 0.113893, -0.117131, -0.064768, 0.047413],
    [0.117159, 0.122643, 0.050280, -0.026738, -0.039948, 0.049292],
    [0.181307, 0.166988, 0.102051, -0.009499, -0.153621, 0.008565],
    [0.125433, 0.132825, 0.088482, 0.024812, -0.113480, -0.047851],
    [0.192743, 0.206325, 0.144009, 0.021801, -0.078010, -0.036580],
    [0.136348, 0.190758, 0.131946, 0.018779, 0.027915, -0.086448],
    [0.175180, 0.145289, 0.109622, 0.037790, -0.180728, 0.039357],
    [0.248024, 0.240985, 0.220503, 0.089449, -0.205073, 0.036928],
    [0.069044, 0.119282, 0.022421, 0.033135, -0.105940, -0.113368],
    [0.135471, 0.088341, 0.057520, 0.056452, -0.238071, 0.009931],
    [0.202687, 0.174427, 0.115024, 0.053530, -0.261649, -0.071726],
    [0.078074, 0.108106, 0.056630, 0.157271, -0.081587, -0.090440],
    [0.239197, 0.203528, 0.178069, 0.126416, -0.288236, -0.037826],
    [0.157718, 0.131318, 0.075766, 0.029758, -0.310464, -0.139222]
]

#欧拉角
camera_poses = [
    [0.03669000, -0.00424400, 0.50612800, 1.30147489, -1.23722606, 1.15945704],
    [0.03750500, -0.01566000, 0.34788400, 1.38160562, -1.27649815, 1.18784030],
    [0.05686800, -0.03682700, 0.43866200, 1.41626975, -1.25176795, 1.28962768],
    [0.01201000, -0.02003900, 0.37782800, 1.34860820, -1.21430271, 1.24889610],
    [0.19758600, 0.07380800, 0.78246000, -2.29451253, -0.64168671, -2.46185957],
    [-0.08117400, -0.02781000, 0.42925300, 1.44863576, -0.11323496, -1.68247851],
    [0.09018700, -0.04278600, 0.42085800, 1.48143096, 0.22472577, -1.48900043],
    [0.09154600, -0.08157600, 0.57617100, 1.44033244, 0.24617735, -1.45524377],
    [-0.03763800, -0.03407900, 0.28981600, 1.53136779, 0.15853981, -1.62040439],
    [0.09325200, -0.04257800, 0.33238600, 1.50154846, 0.21041963, -1.52500963],
    [0.05782500, -0.07503700, 0.45353900, 1.49596321, 0.25177169, -1.40756891],
    [-0.02043500, -0.06139200, 0.29941600, 1.59129958, 0.35357592, -1.62532168],
    [0.09583400, -0.10928200, 0.51782500, 1.42930771, -0.19678792, -1.68239378],
    [0.03856100, -0.04344400, 0.38421100, 1.55430847, 0.17475048, -1.74640041]
]
# T矩阵列表 (共14个)
ts = [
    [
        [0.032906, -0.999273, 0.019252, 0.036690],
        [-0.083993, -0.021959, -0.996224, -0.004244],
        [0.995923, 0.031165, -0.084655, 0.506128],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [0.012003, -0.996892, 0.077865, 0.037505],
        [-0.149300, -0.078785, -0.985648, -0.015660],
        [0.988719, 0.000206, -0.149782, 0.347884],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [0.060814, -0.997919, -0.021448, 0.056868],
        [-0.154251, 0.011833, -0.987961, -0.036827],
        [0.986158, 0.063390, -0.153210, 0.438662],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [-0.007451, -0.999875, -0.013945, 0.012010],
        [-0.195987, 0.015135, -0.980490, -0.020039],
        [0.980578, -0.004573, -0.196075, 0.377828],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [0.032219, -0.998478, 0.044771, 0.197586],
        [-0.620373, 0.015143, 0.784161, 0.073808],
        [-0.783645, -0.053039, -0.618941, 0.782460],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [-0.113474, -0.991454, 0.064357, -0.081174],
        [-0.149336, -0.047020, -0.987668, -0.027810],
        [0.982254, -0.121685, -0.142724, 0.429253],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [0.082686, -0.995885, -0.037105, 0.090187],
        [-0.224299, 0.017680, -0.974360, -0.042786],
        [0.971006, 0.088889, -0.221914, 0.420858],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [0.116741, -0.990557, -0.071894, 0.091546],
        [-0.245595, 0.041348, -0.968490, -0.081576],
        [0.962317, 0.130719, -0.238448, 0.576171],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [-0.049755, -0.996477, -0.067508, -0.037638],
        [-0.157933, 0.074591, -0.984628, -0.034079],
        [0.986196, -0.038328, -0.161088, 0.289816],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [0.047194, -0.994464, -0.093886, 0.093252],
        [-0.209915, 0.082018, -0.974273, -0.042578],
        [0.976580, 0.065688, -0.204882, 0.332386],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [0.033621, -0.984630, -0.171384, 0.057825],
        [-0.251053, 0.157662, -0.955047, -0.075037],
        [0.967389, 0.075136, -0.241893, 0.453539],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [-0.037676, -0.998305, -0.044352, -0.020435],
        [-0.352990, 0.054818, -0.934020, -0.061392],
        [0.934868, -0.019534, -0.354457, 0.299416],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [0.116837, -0.983482, -0.138250, 0.095834],
        [-0.196344, 0.113582, -0.973934, -0.109282],
        [0.973549, 0.140936, -0.179830, 0.517825],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ],
    [
        [-0.020242, -0.978405, -0.205702, 0.038561],
        [-0.174241, 0.206048, -0.962904, -0.043444],
        [0.984495, 0.016351, -0.174649, 0.384211],
        [0.000000, 0.000000, 0.000000, 1.000000]
    ]
]
camera_poses = []
for i, T in enumerate(ts):
    result = matrix_to_6dof(T)
    camera_poses.append(result.tolist())
# 输出结果
print("转换后的XYZ和旋转向量列表:")
for i, xyz_rv in enumerate(camera_poses):
    print(f"[{', '.join(f'{x:12.8f}' for x in xyz_rv)}]")

mapper = SixDofPoseMapper()
W, b = mapper.train(camera_poses, target_poses)
print(W)
print(b)

# 分析权重矩阵
components = mapper.decompose_weights()
print("位置映射矩阵:\n", components['W_pos'])
print("旋转映射矩阵:\n", components['W_rot'])

# 评估模型
metrics = mapper.evaluate(camera_poses, target_poses)
print(f"平均位置误差: {metrics['mean_pos_error']*1000:.2f} mm")
print(f"平均旋转误差: {metrics['mean_rot_error']:.2f} °")

# 新数据预测
# new_cam_pose = np.array([0.05, -0.03, 0.02, 0.1, -0.2, 0.15])
# predicted_target = mapper.predict(new_cam_pose)
# print("预测目标位姿:", predicted_target)

Ptest = [0.0061665077490220405, -0.20601914375490243, 0.5707273117110422, 2.348917647202887, -0.052284727537728275, -0.7842750429132445]

T = np.array([[-0.06626801, -0.99177831, -0.10947264 , 0.01547261],
 [-0.19423656 , 0.12043718 ,-0.97353327, -0.0583432 ],
 [ 0.97871381 ,-0.04325065, -0.20062073 ,0.4441565 ],
 [0, 0,0,1   ]])

# Ptest =  [-0.08054225424878625, -0.27672993507210675, 0.504279550303617, 2.275870195540018, 0.06986945498023787, -0.7688810307496556]

# T = np.array(    [
#         [0.012003, -0.996892, 0.077865, 0.037505],
#         [-0.149300, -0.078785, -0.985648, -0.015660],
#         [0.988719, 0.000206, -0.149782, 0.347884],
#         [0.000000, 0.000000, 0.000000, 1.000000]
#     ])

new_cam_pose = matrix_to_6dof(T)
print("检测位姿，旋转向量 new_cam_pose:", new_cam_pose)

predicted_target = mapper.predict(new_cam_pose)
print("预测行进变量 predicted_target:", predicted_target)

Pfinal = Ptest - predicted_target
print("预测目标充电枪位姿 Pfinal:", Pfinal)


# #参考目标位姿：
# Pcon = [-0.1977019136436981, -0.39937271352807574, 0.454, 2.3026080868759613, 0.10981666956657357, -0.8181736775572053]
# print("参考目标充电枪位姿:", Pcon)

# #充电枪位姿误差
# error = Pfinal - Pcon
# print("充电枪位姿误差:", error)
